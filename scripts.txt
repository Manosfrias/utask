Board.js
    Render the board?
Parser.js
    Take the data on .md and create the content of the task
    Could be this a class?
Render.js
    Create the visual representation of the task on screen
    Could be this a class?
Updater.js
    Ask you to update to 1.0

What does ACE do?
    Is a code editor for using in the web. Cool. That is whats allow us to use the markdown screen
What does Jasmine do?
    Is an unitarian test module for javascript
What does updater do?
    Not sure, I mean, even if the description is quite clear, I am not being able to understand what does.


class mtask
    def _comando_(arg, options)

    def __init__ (args)
        self._name = name
        self.desc = desc
        self.state = state
        self.progress = progress
        self.deadline = deadline

    def _add_(name, desc)
        self._name = name
        self._desc = desc

    def _remove_(name)
        search(self._name == name).remove()

    def _list_
        for mtask in mtask.list
            print(self)

    def _go_(name, state)
        search(self._name == name).add(mtastk._state = state)


WTF ist GitHubGist
	
	
=====

Vamos a trabajar con Python 3, concretamente 3.6

pyenv install --list

pyenv install 3.6.6

Instala distintos python en distintas rutas. 
Por lo que podremos utilizar esos pyton como vitualEnv. Te crea un lugar donde trabajar

variable = 1 // no es una expresión
variable + 1 // sí es una expresión > generalmente muestra el resultado debajo
importar > import math > importa el módulo math
para ver que hay dentro de math podemos ver dir(math) que nos devuelve una lista de 
lo que hay
from math import sin, cos > nos permite importar ambas funciones 

Todos los objetos de python tienen una identidad única algo así como un dni

Hay comparador de identidad, lo que nos permite saber si una función es igual a otra

Se puede romper la identidad y que sean iguales

El == compara si son iguales bajo una forma arbitraria de igualdad, es dinámico.
Existe bajo la identidad que le demos nosotros.
El is compara el id

Comentarios multilena """Empezamos a escribir
podemos continuar"""

Cadenas de bytes > sirven para introducr números como cadenas de bites > ASCII
b"A"

Es una forma conveniente para meter bites. Está muy ligado a ASCII. 

Automáticamente mete las variables en _, sustituyendo el contenido por la última
variable anónima introducida.

Cadena de formatos empieza por f y se añade la variable entre {}
n = 42
en la 3.6 f"La respuesta al universo, la vida y todo lo demás es {n}"
en la 3.5 "La respuesta al universo, la vida y todo lo demás es {respuesta}".format(respuesta = n)
versiones más viejas "La respuesta al universo, la vida y todo lo demás es %i" % n
Se llaman formato pq parametrizan la cadena.

Otras cadenas son las row, literal, p.e. si hubiera un enter "\n", lo imprimiría 
como "\n"
r"Primera linea\nSegunda linea"

Boolean : True or False
None es como Null

Sí algo es None, siempre usamos lo mismo, la misma identidad. Por lo que podemos
crear comparaciones para saber si algo es None

Podemos crear comparaciones negativas con
True is not True

Conjunto (= set) de elementos que no se repite y no importa el orden
{1,2,3}

Por lo que si queremos acceder tenemos que conocer que dato queremos acceder

Luego tenemos los diccionarios
{algo : 100}

Tupla : un valor que nunca se puede cambiar, está entre paréntesis. Es inmutable
... más o menos, si metemos algo mutable dentro, los elementos de eso mutable
podremos cambiarlos, p.e. t((1,2), [1,2])

No se pueden asignar valores a otros valores. El = tienen un funcionamiento
definido, asignar a un nombre un valor. Dar nombre a un valor.

nombre = valor -> id()

El nombre es una abstracción, no tiene identidad. Es una abastración del lenguaje

La clase es el template de un tipo nuevo. El layout o esquelo, que le damos
a un conjunto de valores  que tienen que seguir unas líneas de diseño (definidas
en la clase)

Tambien hay conjuntos inmutables, llamados frozenset({1,2,3})

locals()


ESTRUCTURAS DE CONTROL

Iteracion
for x in xrange(1,10):
    pass
for index, value in enumerate('ola k ase')
    pass
while true:
    pass

